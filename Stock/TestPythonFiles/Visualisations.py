{
  "cells": [
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = pd.read_csv(\"cleanedsamsungtech1519.csv\")\n#print(data)",
      "execution_count": 1,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "data['High'] = data['High'].replace('null', np.nan)\ndf = data.dropna(axis=0, subset=['High'])\ndf.rename(columns={'Adj Close':'adj_close', 'Date':'date'}, inplace = True)\n",
      "execution_count": 2,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "#convert  date data to datetime format\ntheDates =  pd.to_datetime(df['date'], format='%m/%d/%Y')\n\n#list out years\nlistofyears = []\n\nfor i in range(len(theDates)):\n    datesint = int(theDates[i].year)\n    #print(datesint)\n    listofyears.append(datesint)\n    #print(\"this is number \" + str(i) + \" \"+ str(theDates[i].year))\n    \n#remove duplicates years\nyearsnodups = list(dict.fromkeys(listofyears))\nprint(yearsnodups)\n\n\n#list out adj_close\nadjclose = []\nfor i in range(len(theDates)):\n    AdjClose = float(df.adj_close[i])\n    adjclose.append(AdjClose)\n    \n    \n\n    ",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": "[2015, 2016, 2017, 2018, 2019]\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "#list out months\nlistofmonths = []\nb = []\n\nfor i in range(len(theDates)):\n    monthsint = int(theDates[i].month)\n    #print(datesint)\n    listofmonths.append(monthsint)\n    \n#print(listofmonths)\n\n#remove duplicates months\nmonthsnodups = list(dict.fromkeys(listofmonths))\nprint(monthsnodups)\n\n\n#a = input(\"Pick a year between 2015 to 2019: \")\n#for i in range(len(theDates)):\n   # if a == theDates[i].year:\n       # monthsforthatyear = theDates[i].month\n       # b.append(monthsforthatyear)\n\n#print(b)\n",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": "[4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3]\nPick a year between 2015 to 2019: 2015\n[]\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "#pd.to_datetime(df['date'], format='%m/%d/%Y')\n#datafor2015 = df[\"01/01/2015\":\"01/01/2016\"]\n#datafor2015.read(4)\na = int(input(\"Enter a year: \"))\ndataforthechosenyear = []\nmonthsforchosenyear = []\n\nfor i in range(len(theDates)):\n    if int(theDates[i].year) == a:\n        #print(df.adj_close[i], theDates[i])\n        dataforthechosenyear.append(df.adj_close[i])\n        #monthsforchosenyear.append(theDates[i])\n        \n        #if int(theDates[i].month) == b:\n\nprint(dataforthechosenyear)\n\n\n        \n#try graph\n#rng = np.arange(12)",
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Enter a year: 2015\n[287.63320899999997, 288.990875, 286.85736099999997, 285.887604, 280.45697, 286.46948199999997, 281.232727, 277.353668, 280.069031, 283.366241, 281.42669700000005, 273.474609, 270.565308, 264.940643, 268.62573199999997, 273.474609, 271.535034, 264.164825, 265.716461, 259.509918, 259.12203999999997, 258.152252, 258.540161, 259.897827, 257.182495, 256.018768, 259.509918, 264.940643, 262.225281, 261.837372, 264.164825, 254.855087, 253.8853, 253.497406, 250.394119, 252.72155800000002, 246.902939, 259.31601, 260.091827, 254.855087, 248.64856, 244.769485, 243.799698, 247.678802, 246.321121, 243.411819, 243.217789, 245.35134900000003, 245.545303, 248.454575, 256.212708, 252.52760299999997, 246.127121, 247.87271099999998, 258.570831, 255.94674700000002, 261.396729, 262.204163, 255.94674700000002, 248.276459, 250.294907, 250.09307900000002, 255.341202, 254.130096, 255.54307599999999, 247.267212, 249.28566, 258.772644, 263.415253, 257.359711, 254.9375, 252.919006, 249.083862, 248.0746, 248.276459, 248.276459, 254.9375, 245.248688, 239.19311499999998, 237.174606, 238.58757000000003, 233.945023, 225.063568, 229.302444, 230.31172200000003, 233.541336, 232.93574500000003, 230.109848, 230.109848, 222.843231, 228.29321299999998, 232.93574500000003, 229.90798999999998, 222.237686, 217.79698199999999, 217.79698199999999, 215.37475600000002, 215.37475600000002, 218.200653, 219.815475, 219.00807200000003, 220.01734900000002, 226.476532, 227.889496, 224.458038, 228.29321299999998, 231.52279700000003, 228.89875800000002, 225.063568, 226.88023399999997, 226.678391, 232.53207400000002, 233.541336, 240.202423, 232.128387, 231.119125, 228.29321299999998, 227.28393599999998, 224.458038, 228.89875800000002, 228.89875800000002, 225.871002, 225.063568, 232.33021499999998, 252.51527400000003, 256.35049399999997, 254.33194, 252.717194, 253.12086499999998, 256.148621, 255.341202, 253.524521, 255.54307599999999, 256.35049399999997, 258.368958, 260.185638, 260.791168, 262.002289, 264.020813, 267.452271, 276.939209, 279.159607, 272.902252, 268.461548, 270.883698, 270.076324, 271.287384, 266.644897, 269.06701699999996, 265.83743300000003, 262.406006, 254.9375, 256.35049399999997, 258.570831, 260.185638, 259.378235, 258.772644, 262.204163, 262.204163, 269.470734, 267.855957, 259.17639199999996, 266.644897, 262.406006, 260.387482, 256.148621, 254.73565699999997, 254.73565699999997, 254.9375, 258.974518, 259.17639199999996, 254.533798, 257.763428, 262.204163, 260.387482, 257.965271, 258.368958, 260.791168, 261.396729, 259.378235, 255.54307599999999, 1204.7028810000002, 1210.466919]\n"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "#graph for years\n\n\n    \n\n\nrng = np.arange(5)\ny = np.array(adjclose)\n#rnd = df.dates.theDates.year(0, 2, size=(1, rng.size))\n#print(rnd)\nyrs = 2015 +rng\nx = np.array(listofyears)\nfig, ax = plt.subplots(figsize=(8, 5))\n#ax.stackplot(yrs, y)\nax.plot(x, y)\nax.set_title('Samsung Stock Trends (2015-2019)')\nax.set_ylabel('Adj Close')\nax.set_xlabel('Years')\nax.set_xlim(2015, 2019)\nfig.tight_layout()",
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": "<Figure size 576x360 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "scrolled": true
      },
      "cell_type": "code",
      "source": "#graph for months\n\nrng1 = np.arange(12)\ny = np.array(adjclose)\nmonths = 1 +rng1\nx = np.array(listofmonths)\nfig, ax = plt.subplots(figsize=(8, 5))\nax.plot(x, y)\nax.set_title('Samsung Stock Trends (2015)')\nax.set_ylabel('Adj Close')\nax.set_xlabel('Months')\nax.set_xlim(1, 12)\nfig.tight_layout()\n\n\n",
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": "<Figure size 576x360 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(df)",
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": "      Unnamed: 0        date   Open   High    Low  Close     adj_close  \\\n0              0    4/9/2015  29400  29780  29400  29660    287.633209   \n1              1   4/10/2015  29600  29880  29560  29800    288.990875   \n2              2   4/13/2015  29580  29820  29360  29580    286.857361   \n3              3   4/14/2015  29700  29700  29300  29480    285.887604   \n4              4   4/15/2015  29200  29400  28540  28920    280.456970   \n5              5   4/16/2015  29240  29540  28940  29540    286.469482   \n6              6   4/17/2015  29540  29560  28940  29000    281.232727   \n7              7   4/20/2015  28920  28960  28460  28600    277.353668   \n8              8   4/21/2015  28420  28900  28400  28880    280.069031   \n9              9   4/22/2015  28880  29460  28720  29220    283.366241   \n10            10   4/23/2015  29400  29400  28800  29020    281.426697   \n11            11   4/24/2015  28980  29100  28000  28200    273.474609   \n12            12   4/27/2015  28200  28220  27500  27900    270.565308   \n13            13   4/28/2015  27800  28000  27180  27320    264.940643   \n14            14   4/29/2015  27340  27880  27280  27700    268.625732   \n15            15   4/30/2015  27700  28360  27580  28200    273.474609   \n16            16    5/4/2015  28140  28460  27940  28000    271.535034   \n17            17    5/6/2015  27800  27820  27120  27240    264.164825   \n18            18    5/7/2015  27240  27500  27080  27400    265.716461   \n19            19    5/8/2015  27320  27400  26760  26760    259.509918   \n20            20   5/11/2015  27200  27200  26720  26720    259.122040   \n21            21   5/12/2015  26900  27060  26480  26620    258.152252   \n22            22   5/13/2015  26980  26980  26520  26660    258.540161   \n23            23   5/14/2015  26820  26860  26560  26800    259.897827   \n24            24   5/15/2015  27100  27120  26420  26520    257.182495   \n25            25   5/18/2015  26700  26700  26180  26400    256.018768   \n26            26   5/19/2015  26420  27100  26140  26760    259.509918   \n27            27   5/20/2015  26980  27400  26820  27320    264.940643   \n28            28   5/21/2015  27420  27440  26880  27040    262.225281   \n29            29   5/22/2015  27060  27060  26700  27000    261.837372   \n...          ...         ...    ...    ...    ...    ...           ...   \n1082        1084    9/9/2019  46450  47000  46300  46900  46900.000000   \n1083        1086   9/11/2019  47300  47400  46800  47150  47150.000000   \n1084        1087   9/16/2019  47000  47100  46400  47100  47100.000000   \n1085        1088   9/17/2019  47000  47100  46800  46900  46900.000000   \n1086        1089   9/18/2019  46900  47700  46800  47700  47700.000000   \n1087        1090   9/19/2019  48050  49200  47850  49150  49150.000000   \n1088        1091   9/20/2019  49400  49600  49100  49200  49200.000000   \n1089        1092   9/23/2019  49250  49300  49000  49300  49300.000000   \n1090        1093   9/24/2019  49050  49650  48850  49500  49500.000000   \n1091        1094   9/25/2019  49200  49350  48800  48900  48900.000000   \n1092        1095   9/26/2019  49000  49250  48900  49200  49200.000000   \n1093        1096   9/27/2019  48000  48700  48000  48400  48400.000000   \n1094        1097   9/30/2019  48050  49250  47900  49050  49050.000000   \n1095        1098   10/1/2019  48900  49100  48650  48850  48850.000000   \n1096        1099   10/2/2019  48350  48400  47600  47600  47600.000000   \n1097        1101   10/7/2019  48350  48700  47650  47750  47750.000000   \n1098        1102   10/8/2019  47900  49000  47600  48900  48900.000000   \n1099        1103  10/10/2019  48200  49200  48000  48550  48550.000000   \n1100        1104  10/11/2019  49000  49450  48800  49150  49150.000000   \n1101        1105  10/14/2019  50000  50300  49850  50000  50000.000000   \n1102        1106  10/15/2019  49900  50200  49900  50100  50100.000000   \n1103        1107  10/16/2019  50700  50900  50400  50700  50700.000000   \n1104        1108  10/17/2019  50500  50600  50100  50500  50500.000000   \n1105        1109  10/18/2019  50300  50900  49650  49900  49900.000000   \n1106        1110  10/21/2019  49900  50400  49800  50300  50300.000000   \n1107        1111  10/22/2019  50800  51500  50700  51200  51200.000000   \n1108        1112  10/23/2019  51300  51500  50800  51200  51200.000000   \n1109        1113  10/24/2019  52500  52500  50500  50700  50700.000000   \n1110        1114  10/25/2019  50800  51200  50500  50900  50900.000000   \n1111        1115  10/28/2019  50700  51500  50700  51300  51300.000000   \n\n        Volume  \n0      9107550  \n1      9960100  \n2     10293300  \n3      9429750  \n4     13551050  \n5     10762350  \n6     10172300  \n7     12394900  \n8     11852650  \n9     12655550  \n10     9245150  \n11    19089900  \n12    16517150  \n13    15697300  \n14    10895650  \n15    18352850  \n16     8283700  \n17    13270500  \n18    10257400  \n19     9488100  \n20     9640450  \n21    10633200  \n22     9877250  \n23     8488500  \n24     8922350  \n25     9626850  \n26     8680900  \n27    10291450  \n28     7210600  \n29     8195800  \n...        ...  \n1082   9434157  \n1083  16141619  \n1084  15550926  \n1085   7006280  \n1086  10413027  \n1087  16461413  \n1088  15460210  \n1089   7568553  \n1090   7871955  \n1091   9187141  \n1092   8494756  \n1093   8048041  \n1094   9497119  \n1095   6206035  \n1096   8382463  \n1097   7047273  \n1098  14239367  \n1099  18639855  \n1100   7783275  \n1101  11130635  \n1102   6058105  \n1103   9136282  \n1104   6701380  \n1105   8483106  \n1106   4406531  \n1107  10898729  \n1108   8663880  \n1109  21185785  \n1110   7879897  \n1111   6431522  \n\n[1112 rows x 8 columns]\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(dataforthechosenyear)",
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": "[]\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python36",
      "display_name": "Python 3.6",
      "language": "python"
    },
    "language_info": {
      "mimetype": "text/x-python",
      "nbconvert_exporter": "python",
      "name": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.6",
      "file_extension": ".py",
      "codemirror_mode": {
        "version": 3,
        "name": "ipython"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}